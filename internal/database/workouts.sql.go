// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: workouts.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addExerciseToWorkout = `-- name: AddExerciseToWorkout :one
INSERT INTO workout_exercises (
    id,
    workout_id,
    exercise_id,
    position
)
VALUES (
    gen_random_uuid(),
    $1,
    $2,
    $3
)
RETURNING id, workout_id, exercise_id, position
`

type AddExerciseToWorkoutParams struct {
	WorkoutID  uuid.UUID `json:"workout_id"`
	ExerciseID uuid.UUID `json:"exercise_id"`
	Position   int32     `json:"position"`
}

func (q *Queries) AddExerciseToWorkout(ctx context.Context, arg AddExerciseToWorkoutParams) (WorkoutExercise, error) {
	row := q.db.QueryRowContext(ctx, addExerciseToWorkout, arg.WorkoutID, arg.ExerciseID, arg.Position)
	var i WorkoutExercise
	err := row.Scan(
		&i.ID,
		&i.WorkoutID,
		&i.ExerciseID,
		&i.Position,
	)
	return i, err
}

const createWorkoutRoutine = `-- name: CreateWorkoutRoutine :one
INSERT INTO workout_routines (
    id,
    name,
    description,
    total_duration,
    rounds_per_exercise,
    round_duration,
    rest_duration
)
VALUES (
    gen_random_uuid(),
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
RETURNING id, name, description, total_duration, rounds_per_exercise, round_duration, rest_duration
`

type CreateWorkoutRoutineParams struct {
	Name              string `json:"name"`
	Description       string `json:"description"`
	TotalDuration     int32  `json:"total_duration"`
	RoundsPerExercise int32  `json:"rounds_per_exercise"`
	RoundDuration     int32  `json:"round_duration"`
	RestDuration      int32  `json:"rest_duration"`
}

func (q *Queries) CreateWorkoutRoutine(ctx context.Context, arg CreateWorkoutRoutineParams) (WorkoutRoutine, error) {
	row := q.db.QueryRowContext(ctx, createWorkoutRoutine,
		arg.Name,
		arg.Description,
		arg.TotalDuration,
		arg.RoundsPerExercise,
		arg.RoundDuration,
		arg.RestDuration,
	)
	var i WorkoutRoutine
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.TotalDuration,
		&i.RoundsPerExercise,
		&i.RoundDuration,
		&i.RestDuration,
	)
	return i, err
}

const getWorkoutRoutines = `-- name: GetWorkoutRoutines :many
SELECT id, name, description, total_duration, rounds_per_exercise, round_duration, rest_duration FROM workout_routines
`

func (q *Queries) GetWorkoutRoutines(ctx context.Context) ([]WorkoutRoutine, error) {
	rows, err := q.db.QueryContext(ctx, getWorkoutRoutines)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WorkoutRoutine
	for rows.Next() {
		var i WorkoutRoutine
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.TotalDuration,
			&i.RoundsPerExercise,
			&i.RoundDuration,
			&i.RestDuration,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
