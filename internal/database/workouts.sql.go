// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: workouts.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createRound = `-- name: CreateRound :one
INSERT INTO rounds (
    id,
    round_number,
    reps_completed,
    workout_exercise_id
)
VALUES (
    gen_random_uuid(),
    $1,
    $2,
    $3
)
RETURNING id, round_number, reps_completed, workout_exercise_id
`

type CreateRoundParams struct {
	RoundNumber       int32     `json:"round_number"`
	RepsCompleted     float32   `json:"reps_completed"`
	WorkoutExerciseID uuid.UUID `json:"workout_exercise_id"`
}

func (q *Queries) CreateRound(ctx context.Context, arg CreateRoundParams) (Round, error) {
	row := q.db.QueryRowContext(ctx, createRound, arg.RoundNumber, arg.RepsCompleted, arg.WorkoutExerciseID)
	var i Round
	err := row.Scan(
		&i.ID,
		&i.RoundNumber,
		&i.RepsCompleted,
		&i.WorkoutExerciseID,
	)
	return i, err
}

const createWorkout = `-- name: CreateWorkout :one
INSERT INTO workouts (
    id,
    name,
    description,
    total_duration,
    user_id
)
VALUES (
    gen_random_uuid(),
    $1,
    $2,
    $3,
    $4
)
RETURNING id, name, description, total_duration, user_id
`

type CreateWorkoutParams struct {
	Name          string    `json:"name"`
	Description   string    `json:"description"`
	TotalDuration int32     `json:"total_duration"`
	UserID        uuid.UUID `json:"user_id"`
}

func (q *Queries) CreateWorkout(ctx context.Context, arg CreateWorkoutParams) (Workout, error) {
	row := q.db.QueryRowContext(ctx, createWorkout,
		arg.Name,
		arg.Description,
		arg.TotalDuration,
		arg.UserID,
	)
	var i Workout
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.TotalDuration,
		&i.UserID,
	)
	return i, err
}

const createWorkoutExercise = `-- name: CreateWorkoutExercise :one
INSERT INTO workouts_exercises (
    id,
    time_seconds,
    weight_kg,
    workout_id,
    exercise_id
)
VALUES (
    gen_random_uuid(),
    $1,
    $2,
    $3,
    $4
)
RETURNING id, time_seconds, weight_kg, workout_id, exercise_id
`

type CreateWorkoutExerciseParams struct {
	TimeSeconds int32     `json:"time_seconds"`
	WeightKg    float32   `json:"weight_kg"`
	WorkoutID   uuid.UUID `json:"workout_id"`
	ExerciseID  uuid.UUID `json:"exercise_id"`
}

func (q *Queries) CreateWorkoutExercise(ctx context.Context, arg CreateWorkoutExerciseParams) (WorkoutsExercise, error) {
	row := q.db.QueryRowContext(ctx, createWorkoutExercise,
		arg.TimeSeconds,
		arg.WeightKg,
		arg.WorkoutID,
		arg.ExerciseID,
	)
	var i WorkoutsExercise
	err := row.Scan(
		&i.ID,
		&i.TimeSeconds,
		&i.WeightKg,
		&i.WorkoutID,
		&i.ExerciseID,
	)
	return i, err
}

const createWorkoutSummary = `-- name: CreateWorkoutSummary :one
INSERT INTO workout_summary (
    workout_exercise_id,
    total_reps,
    work_capacity
)
VALUES (
    $1,
    $2,
    $3
)
RETURNING workout_exercise_id, total_reps, work_capacity
`

type CreateWorkoutSummaryParams struct {
	WorkoutExerciseID uuid.UUID `json:"workout_exercise_id"`
	TotalReps         float32   `json:"total_reps"`
	WorkCapacity      float32   `json:"work_capacity"`
}

func (q *Queries) CreateWorkoutSummary(ctx context.Context, arg CreateWorkoutSummaryParams) (WorkoutSummary, error) {
	row := q.db.QueryRowContext(ctx, createWorkoutSummary, arg.WorkoutExerciseID, arg.TotalReps, arg.WorkCapacity)
	var i WorkoutSummary
	err := row.Scan(&i.WorkoutExerciseID, &i.TotalReps, &i.WorkCapacity)
	return i, err
}
